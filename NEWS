3.5-0
	* Substantial efficiency improvements throughout for Cox models.
          Coordinate descent redesigned to work in O(n) instead of O(n^2)
          operations, and R code redesigned at various points to avoid the
          creation of any n x n matrices when fitting and cross-validating Cox
          regression models.
	* Added function AUC() to calculate cross-validated AUC values for
          ncvsurv models.
	* Changed method for calculation of cross-validation loss in
          cv.ncvsurv().
	* More accurate calculation for convexMin in the presence of unpenalized
          variables
	* Bug fix for factor-valued y with CV logistic regression
	* Added option to return fitted values from cross-validation folds
          (returnY=TRUE) to cv.ncvreg and cv.ncvsurv.
	* Better double/int type checking for penalty.factor
	* Modifications to NAMESPACE for compatibility with R 3.3.

3.4-0
	* Expanded predict function for Cox models.  predict.ncvsurv now
	  estimates subject-specific survival functions and medians.
	* Added plot method for survival curves.
	* Added option in perm.ncvreg to permute residuals for linear regression
	* On a related note, added permres() function to estimate false
	  inclusion rates based on residuals at a specific value of lambda
	* Added some support for factors in X, y.  It is still recommended that
	  users convert X to a numeric matrix prior to fitting in order to
	  ensure that predict() methods work properly, but ncvreg will now allow
	  you to pass a data frame with factors and handle things appropriately.
	* Fixed a bug for predict.ncvsurv when applied to models with
	  saturation issues
	* Fixed small memory leak in ncvsurv

3.3-0
	* Support for fitting survival models added (ncvsurv), along
	  with predict, plot, and cv.ncvsurv support functions.  Currently,
	  Cox models are the only type of survival model implemented.
	* Added parallel support for cv.ncvreg (with help from Grant Brown)
	* Fixed bug in cv.ncvreg when attempting to use leave-one-out
	  cross-validation (thank you to Cajo ter Braak for pointing this
	  out)
	* ncvreg_fit taken offline; it will return in a future version of
	  the ncvreg package.

3.2-0
	* Updated algorithm to 'hybrid' strong/active cycling
	* Automatically coerces X to matrix and y to numeric if possible
	* Made ncvreg_fit more user-friendly: user no longer has to
	  specify lambda, works with coef, predict, plot, etc.
	* Fixed bug in convexMin when used with penalty.factor option
	* Modified order of arguments for predict so that 'type' comes
	  before 'lambda' and 'which'.

3.1-0
	* Added support for Poisson regression
	* Fixed bug in ncvreg_fit that could arise when fitting a model
	  without an intercept
	* Fixed bug in cv.ncvreg with univariate regression (thank you to
	  Diego Franco Saldana for pointing this out)

3.0-0
	* Revised internal algorithms to incorporate targeted cycling
	  based on strong rules
	* Moved standardization to C
	* Moved calculation of lambda sequence to C
	* As a result of the above three changes, ncvreg now runs
	  much faster for large p
	* Added fir(), perm.ncvreg(), and plot.fir() functions for the
	  purposes of estimating and displaying false inclusion rates;
	  these are likely to evolve over the next few months
	* Fixed a bug in cv.ncvreg for user-specified lambda sequence

2.7-0
	* Added "vars" and "nvars" options to predict function.
	* Modified look of summary(cvfit) output.
	* Modified internal details of .Call interface.

2.6-0
	* Introduction of function ncvreg_fit for programmers who want to
	  access the internal C routines of ncvreg, bypassing internal
	  standardization and processing
	* Internal restructuring: .Call now used instead of .C
	* Bug fix for axis annotations with plot.cv.ncvreg when model is
	  saturated.
	* Bug fix for deviance calculation; would return NaN if fitted
	  probabilities of 0 or 1 occurred for binomial outcomes.
	* Bug fix in NAMESPACE for coef.cv.ncvreg and predict.cv.ncvreg
	* Added vertical.line and col options to plot.cv.ncvreg

2.5-0
	* Added options in plot.cv.ncvreg to plot estimates of r-squared,
	   signal-to-noise ratio, scale parameter, and prediction error in
	   addition to cross-validation error (deviance)
	* Added summary method for cv.ncvreg which displays the above
	   information at lambda.min, the value of lambda minimizing the
	   cross-validation error.
	*  Fixed bug in cv.ncvreg with user-defined lambda values.

2.4-0
	* Fixed error in definition/calculation of cross-validation
	   error and standard error
	* Added penalty.factor option
        *  cv.grpreg: Now returns full data fit as well as CV errors
	*  coef and predict methods now accept lambda as argument
	*  Added logLik method (which in turn allows AIC/BIC)
	*  Fixed bug that arose if lambda was scalar (instead of a vector)
	*  cdfit_ now returns loss (RSS for gaussian, deviance for binomial)
	*  Fixed bug in cv.ncvreg for linear regression -- cross-validation
	   was being carried out deterministically
	   (Thank you to Brenton Kenkel for pointing this out)
	*  Internal change: standardization more efficient
	*  Fixed bug: Intercept for logistic regression was not being
	   calculated for lamda=0

2.3-2
	* Fixed formatting error in citation.
	
2.3-1
	* plot.ncvreg: Made the passing of arguments more flexible, so
	that user can pass options concerning both the plot and the lines.
	* plot.ncvreg: Changed some of the default settings with respect
	to color (hcl instead of hsv) and line width.

2.3
	* cv.ncvreg.Rd: Fixed the documentation, which no longer agreed
	with the function usage.  This was an oversight in the release of
	version 2.2.

2.2
	* cv.ncvreg: Divorced cross-validation from fitting.  From a user
	perspective, this increases flexibility, although obtaining the
	model with CV-chosen regularization parameter now requires two
	calls (to ncvreg and cv.ncvreg).  The functions, however, are
	logically separate and involve entirely separate methods.
	* plot.cv.ncvreg: Developed a plotting method specific to
	cv.ncvreg objects.
